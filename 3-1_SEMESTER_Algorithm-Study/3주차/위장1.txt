#include<stdio.h>
#include<iostream>
#include <string>
#include <vector>
#include<map>
#include <cmath>
using namespace std;


void process(int q,vector<int> &a,int arr[]){
	int mulsum=1;
	for(int i = q-1; i>= 0; i--){

		mulsum*=arr[i];
	}
	arr[a.size()]+=mulsum;
}
/*data[]에서 앞에서부터 n개의 숫자 중 r개를 선택해서 조합을 출력하는 함수. q는 출력 시 출력 갯수 지정*/
void Comb(int n, int r, int q,vector<int> &a,int arr[]){
	if(r == 0){
		process(q,a,arr);
		return;
	}else if(n<r){
		return;
	}
	else {  //loop이 아님
		arr[r-1] = a[n-1];
		Comb(n-1, r-1, q,a,arr);  //n-1Cr-1: 현재 아이템을 선택한 경우
		Comb(n-1, r, q,a,arr);    //n-1Cr: 현재 아이템을 선택하지 않은 경우
	}
}
int solution(vector<vector<string>> clothes) {
	int answer = 0;
	int i=0;
	std:: map<string,int> mymap;

	while(i!=clothes.size()){
		if(mymap.count(clothes[i][1])!=0){
			mymap[clothes[i][1]]++;
		}

		else{
			mymap.insert ( std::pair<string,int>(clothes[i][1],1) );
		}
		i++;
	}

	vector<int> a;
	for (std::map<string,int>::iterator it=mymap.begin(); it!=mymap.end(); ++it)
		a.push_back(it->second);
	int n=a.size();
	int *arr=new int[n+1];
	arr[n]=0;

	for(i=1;i<=n;i++)
		Comb(n,i,i,a,arr);

	answer=arr[n];
	return answer;
}
int main(void){

	int n=5;
	vector<int> a;
	a.push_back(1);
	a.push_back(2);
	a.push_back(3);
	a.push_back(4);
	a.push_back(5);
	int *arr=new int[n+1];
	arr[n]=0;
	Comb(n,5,5,a,arr);
	cout<<arr[n];


	return 0;
}

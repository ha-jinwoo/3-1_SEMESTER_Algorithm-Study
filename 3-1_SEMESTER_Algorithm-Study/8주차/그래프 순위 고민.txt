#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void dfs2(int w,vector<vector<int>>a,vector<bool>&visit){

	visit[w]=1;
	int j=0,ww;
	for(j=0;j<a[w].size();j++){
		ww=a[w][j];
		if(visit[ww]==0){
			dfs2(ww,a,visit);
		}
	}
}

bool dfs3(int w,vector<vector<int>>a,vector<bool>&visit,int value){

	int j=0,ww;
	for(j=0;j<a[w].size();j++){
		ww=a[w][j];
		if(ww==value){visit[w]=1;return 1;}
		if(visit[ww]==0){
			if(dfs3(ww,a,visit,value)){visit[w]=1;return 1;}
		}
	}

	return 0;
}
bool check(vector<bool>visit){
	for(int i=1;i<visit.size();i++)if(visit[i]==0)return 0;
	return 1;
}
int solution(int n, vector<vector<int>> results) {
	int answer = 0,i=0;
	vector<int>b;
	vector<vector<int>> a;
	for(int k=0;k<n+1;k++)a.push_back(b);
	vector <bool> visit(n+1,0);
	while(i!=results.size()){ a[results[i][1]].push_back(results[i][0]); i++;}
	int k=1;
	while(k!=n+1){
		for(i=0;i<visit.size();i++)visit[i]=0;
		dfs2(k,a,visit);
		for(i=1;i<visit.size();i++)if(visit[i]==0)if(!dfs3(i,a,visit,k))break;
		if(check(visit))answer++;
		k++;
	}
	return answer;
}

int main(){
	vector<int>b;
	vector<vector<int>> results;
	for(int k=0;k<5;k++)results.push_back(b);
	results[0].push_back(4);
	results[0].push_back(3);
	results[1].push_back(4);
	results[1].push_back(2);
	results[2].push_back(3);
	results[2].push_back(2);
	results[3].push_back(1);
	results[3].push_back(2);
	results[4].push_back(2);
	results[4].push_back(5);
	cout<<solution(5,results);

}

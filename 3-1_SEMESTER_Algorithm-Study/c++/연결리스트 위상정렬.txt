#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int start=1;
struct h{
	int index;
	int value;
};
bool comparey(struct h a,struct h b){
	return a.value>b.value;
}
void dfs(int w,vector<vector<int>>a,vector <bool> &visit,vector<struct h >&h){
 visit[w]=1;
 int j=0,ww;
  for(j=0;j<a[w].size();j++){
   ww=a[w][j];
   if(visit[ww]==0){
    dfs(ww,a,visit,h);
   }
  }
 start++;
 h[w].value=start;
}
vector<int> topologicalsort(vector<vector<int>>a,vector <bool> &visit){
 vector<struct h >h(visit.size());
 for(int i=1;i<visit.size();i++)h[i].index=i;
 int i=1,j=0,w;
  for(i=1;i<visit.size();i++){
    if(visit[i]==0){
     dfs(i,a,visit,h);
   }
  }
  sort(h.begin(),h.end(),comparey);
  vector <int>c;
  for(i=0;i<visit.size()-1;i++)c.push_back(h[i].index);
  return c;
}
int solution(int n, vector<vector<int>> results) {
 int answer = 0,i=0;
 vector<int>b;
 vector<vector<int>> a;
 for(int k=0;k<n+1;k++)a.push_back(b);
 vector <bool> visit(n+1,0);
 while(i!=results.size()){ a[results[i][1]].push_back(results[i][0]); i++;}

 vector<int>c= topologicalsort(a,visit);
 
 
 return answer;
}

int main(){
    vector<int>b;
 vector<vector<int>> results;
 for(int k=0;k<5;k++)results.push_back(b);
 results[0].push_back(4);
 results[0].push_back(3);
 results[1].push_back(4);
 results[1].push_back(2);
 results[2].push_back(3);
 results[2].push_back(2);
 results[3].push_back(1);
 results[3].push_back(2);
 results[4].push_back(2);
 results[4].push_back(5);
 solution(5,results);

}

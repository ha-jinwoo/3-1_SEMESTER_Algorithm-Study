#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
struct h
{

	int a;
	int b;
};
bool comparex(struct h a,struct h b){
	return a.a<b.a;
}
bool comparey(struct h a,struct h b){
	return a.b<b.b;
}
int solution(vector<vector<int>> jobs) {
	int i=0,answer = 0,currenttime=0;
	int x;
	vector<struct h> h;
	while(i<jobs.size()){
		struct h h2;
		h2.a=jobs[i][0]; h2.b=jobs[i][1];
		h.push_back(h2);
		i++;
	}

	sort(h.begin(),h.end(),comparex);
	vector<struct h> heap;
	currenttime+=h[0].b;
	answer+=currenttime;
	i=1;

	while(currenttime>=h[i].a&&i<jobs.size()){
		heap.push_back(h[i]); push_heap (heap.begin(),heap.end(),comparey);
		i++;
	}

	while(heap.size()!=0){
		while(currenttime>=h[i].a&&i<jobs.size()){
			heap.push_back(h[i]); push_heap (heap.begin(),heap.end(),comparey);
			i++;
		}
		currenttime+=heap[heap.size()-1].b;
		x=currenttime-heap[heap.size()-1].a;
		answer+=x;
		heap.pop_back();
	}
	answer/=jobs.size();
	return answer;
}
int main () {
	int myints[] = {10,20,30,5,15};
	std::vector<int> v(myints,myints+5);

	std::make_heap (v.begin(),v.end());
	std::cout << "initial max heap   : " << v.front() << '\n';

	std::pop_heap (v.begin(),v.end()); v.pop_back();
	for (unsigned i=0; i<v.size(); i++)
		std::cout << ' ' << v[i];

	std::cout << '\n';
	std::cout << "max heap after pop : " << v.front() << '\n';

	v.push_back(99); std::push_heap (v.begin(),v.end());
	std::cout << "max heap after push: " << v.front() << '\n';

	std::cout << "final sorted range :";
	for (unsigned i=0; i<v.size(); i++)
		std::cout << ' ' << v[i];

	std::cout << '\n';

	return 0;
}

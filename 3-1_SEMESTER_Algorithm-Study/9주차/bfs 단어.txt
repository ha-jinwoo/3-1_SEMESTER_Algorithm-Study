#include <string>
#include <vector>
#include <iostream>
#include <queue>
using namespace std;
struct h{
	int num;
	string str;
};
void bfs(int start,vector<vector<int>> g,vector <bool> v,vector<int> &answer){
	queue <int> q;
	q.push(start);
	v[start]=1;
	answer[start]=0;
	while(!q.empty()){
		int x=q.front();
		q.pop();
		for(int i=0; i<g[x].size();i++){
			int y=g[x][i];
			if(!v[y]){
				q.push(y);
				v[y]=1;
				answer[y]=answer[x]+1;
			}
		}
	}
}
int solution(string begin, string target, vector<string> words) {
	int answer = 0;
	vector<struct h> h;
	struct h h1;
	int wordsize=words[0].size();
	h1.num=0;
	h1.str=begin;
	h.push_back(h1);
	for(int i=0;i<words.size();i++){
		h1.num=i+1;
		h1.str=words[i];
		h.push_back(h1);
	}

	int start,end;

	vector<vector<int>> g;
	vector<bool> v(words.size()+1,0);
	vector<int> b;
	for(int i=0;i<words.size()+1;i++)g.push_back(b);
	int count=0;
	int flag=0;

	for(int i=0;i<words.size()+1;i++){
		if(target==words[i]){flag=1;end=i+1;}
		for(int j=i+1;j<words.size()+1;j++){
			count=0;
			for(int k=0;k<wordsize;k++){
				if(h[i].str[k]==h[j].str[k])count++;
			}
			if(count==wordsize-1)g[i].push_back(j);
			if(count==wordsize-1)g[j].push_back(i);
		}
	}
	if(flag==0)return 0;
	vector<int> ans(words.size()+1);
	bfs(0,g,v,ans);
	return ans[end];
}

